
-finstrument-functions

Generate instrumentation calls for entry and exit to functions. Just after function entry and just before function exit, the following profiling functions are called with the address of the current function and its call site. (On some platforms, __builtin_return_address does not work beyond the current function, so the call site information may not be available to the profiling functions otherwise.)
          void __cyg_profile_func_enter (void *this_fn,
                                         void *call_site);
          void __cyg_profile_func_exit  (void *this_fn,
                                         void *call_site);
The first argument is the address of the start of the current function, which may be looked up exactly in the symbol table.

This instrumentation is also done for functions expanded inline in other functions. The profiling calls indicate where, conceptually, the inline function is entered and exited. This means that addressable versions of such functions must be available. If all your uses of a function are expanded inline, this may mean an additional expansion of code size. If you use ‘extern inline’ in your C code, an addressable version of such functions must be provided. (This is normally the case anyway, but if you get lucky and the optimizer always expands the functions inline, you might have gotten away without providing static copies.)

A function may be given the attribute no_instrument_function, in which case this instrumentation is not done. This can be used, for example, for the profiling functions listed above, high-priority interrupt routines, and any functions from which the profiling functions cannot safely be called (perhaps signal handlers, if the profiling routines generate output or allocate memory). 

remarks
	outline first
	take off the "attack"
	System on chip
		
package org.eclipse.tracecompass.internal.lttng2.kernel.segment.analysis;

import org.eclipse.jdt.annotation.Nullable;
import org.eclipse.swt.SWT;
import org.eclipse.swt.custom.SashForm;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.tracecompass.tmf.ui.views.TmfView;

/**
 * @author frank
 *
 */
public class SegmentView extends TmfView {

    private static final int[] DEFAULT_WEIGHTS = new int[] { 4, 6 };

    private @Nullable SegmentStoreDensityViewer fDensityViewer1;
    private @Nullable SegmentStoreTableViewer fTableViewer1;
    private @Nullable SegmentStoreDensityViewer fDensityViewer2;
    private @Nullable SegmentStoreTableViewer fTableViewer2;

    /**
     * @param viewName
     */
    //Constructor:
    public SegmentView(String viewName) {
        super(viewName);
    }

    @Override
    public void createPartControl(@Nullable Composite parent) {
        super.createPartControl(parent);

        final SashForm sashForm = new SashForm(parent, SWT.NONE);
        /*
        fTableViewer1 = createSegmentStoreTableViewer(sashForm);
        fDensityViewer1 = createSegmentStoreDensityViewer(sashForm);
        fDensityViewer1.addDataListener(new DataChangedListener());

        fTableViewer2 = createSegmentStoreTableViewer(sashForm);
        fDensityViewer2 = createSegmentStoreDensityViewer(sashForm);
        fDensityViewer2.addDataListener(new DataChangedListener());

        sashForm.setWeights(DEFAULT_WEIGHTS);

        Action zoomOut = new ZoomOutAction(this);
        IToolBarManager toolBar = getViewSite().getActionBars().getToolBarManager();
        toolBar.add(zoomOut);
        ITmfTrace trace = TmfTraceManager.getInstance().getActiveTrace();
        if (trace != null && fDensityViewer1 != null) {
            fDensityViewer1.loadTrace(trace);
        }
        if (trace != null && fDensityViewer2 != null) {
            fDensityViewer2.loadTrace(trace);
        }*/
    }


   protected SegmentStoreTableViewer createSegmentStoreTableViewer(Composite parent){
       return null;
   }

   protected SegmentStoreDensityViewer createSegmentStoreDensityViewer(Composite parent){
       return null;
   }


   public void setFocus() {
       final SegmentStoreDensityViewer viewer = fDensityViewer1;
       if (viewer != null) {
           viewer.getControl().setFocus();
       }
   }

   @Override
   public void dispose() {
       final SegmentStoreDensityViewer densityViewer = fDensityViewer1;
       if (densityViewer != null) {
           densityViewer.dispose();
       }

       final SegmentStoreTableViewer tableViewer = fTableViewer1;
       if (tableViewer != null) {
           tableViewer.dispose();
       }

       super.dispose();
   }

   // Package-visible on purpose for ZoomOutAction
   @Nullable
   SegmentStoreDensityViewer getDensityViewer() {
       return fDensityViewer1;
   }

}


	
	
