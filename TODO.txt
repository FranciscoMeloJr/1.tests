
Data 29
- 
- MongoDB
-exercicios Francis
-Pagar pai da paul - ok
Itau bco 341 / 3241 / 3421
Agencia : 649
Cc 11.428-0

BRADESCO:bco 237
ag 3430  
Cc:0001604-7


Nome: Nacib rishala abu Asseff
Cpf: "26227148-29"

Data 30

- MongoDB
	testes python
	testes bash
	testes javascript
	
-exercicios Francis
	ok fork
	ok pthreads
	ok 

 gcc -c foo.c
 gcc foo.c -o foo
 

Compilando:
 gcc -c source.c
 gcc -o source.o

Makefiles - ok

Direto:
 gcc -o programa source1.c source2.c
 .programa
 
Data 2 Setembro
	- see email:
	Francois
		- javascript mongodb - ok
			fazer o exemplo de bash em js
		- mutual exclusion: entender, aplicar em um exemplo com python, fazer um exemplo

		- analisar com trace compare ambos os testes
		- achar mais problemas
		- implementar outro problema: reading from disk with php
		
	- fork x pthreads x pth
		portable threads

	- paraver
	- reading about trace correlation - master thesis
	- frances
Data 3 de Setembro
		- Finalizacao de exercicios trace compare	
		- strace
Data 4 de Setembro
	- regular meeting - progess meeting
	- Reading again the article of francois
	
	- reading about trace correlation, since it is pointed "Comparison of system call traces recorded on different operating systems has been used to detect intrusions. Since some variations are inherent to the use of different operating systems, the authors transform low-level events into higher-level concepts to allow a meaningful comparison. Their algorithm computes a correlation score for two traces, but doesnt show individual differences. Also, it doesnt take timing into account"
	- Leitura: State History Tree: an Incremental disk-based structure for very large interval data	
	- Leitura Thesis of Trace Correlation
	- 
Data 5 de Setembro
	- Negociar com banco - ok
	- Final de Leitura - Trace Correlation
	- Ler Performance Debugging in the Large via Mining millions of Stack Traces
	- Summary of Papers - ok doing
		
		TraceDiff
			Gosma tool
			It is a visualization and mining tool for traces, which provides according to the authors: scalabilitym robustness and ease to use. This can show different metrics but the main one is to show strong and weak similarity bettwen function calls
						
		IntroPerf
		
		perf to call stack
		
		libundwind: tests with perf
			
	- http://www.tele-task.de/archive/series/overview/883
	- Fazer backup docs - ok
	- Completar um pouco do PhD escrito - ok
	- 
	- Lttng-simple understanding
	
	
Data 6 de Setembro:
	- chegar cedo!! - ok
	- Ler: Article 1:  Efficient Methods for trace analysis parallelization
		
	- 9 mostrar trampos pro Francis - cheguei 9h30
	
	- Do more tests with TraceCompare		
	- Do tests with perf and libunwind
	- Trace Compass example of State History Tree
		> generate them with trace compass

	- re-do the implementation with python and CFT
		
	- Apresentacao Chefe - tenso
		Muito legal, muito legal mesmo =D
			Sai com uma pergunta: 
			Quais partes de um programa sao as mais rapidas caso executado duas vezes? E caso executado n vezes, com pequenas mudancas?

				GNU super optimizer
				achar os hot spots que gastem mais/menos tempo ->
				What is the 
				Find correlation patter bettween the runs?
				Keep track of the samples so you can track the fast
				fazer as alteracoes em paralelo para ser mais rapido

	- Linux trainning
	- Libunwind program

Prototipo>>>>>	Comparar programas de pontos em pontos
	SuperOtimization	
			What is it?
			Superoptimization is the task of finding the optimal code sequence for a single, loop-free sequence of instructions. While garden-variety compiler optimizations really just improve 				code (real-world compilers generally cannot produce genuinely optimal code), a superoptimizer's goal is to find the optimal sequence.
					
			as used superoptimization to automatically generate general-purpose peephole optimizers.
			
-saturday

Python bidings with babeltrace

Profiler visualization:
	gprof2dot
	gprof test | gprof2dot.py > foo.dot


- libunwind x history tree x calling context tree
- stacks builder x state history in tibeecompare

monday 09/11
	- state history tree x calling context
	TODO in Francois work:
		- Declarative language used for trace analysis
		- Analyze performance regressions: with by allowing the user to provide a file, mapping old function names to new names
		- Dealing with code refactoring, 
				> Static analysis techniques exist to identify cloned syntactic blocks between multiple source files
				> 
				comparison between traces recorded on different versions of the same program,
		- avec le mode flight recorder de LTTng
		- allow userspace processes to associate metrics with the current execution (e.g. number of returned results)
		- handle programs written in a dynamic language and JIT compiled.
		
		- Il serait particulièrement intéressant de savoir comment se comporte notre solution dans des environnements
		virtualisés tels que OpenStack ou Amazon Web Services.
	
	Limitation
		Our userspace tracing library can only capture the stack for ELF binaries
		To handle out of the box the specificities of each application

	-Implementation of Learning Base Correlation
		http://www.cs.cornell.edu/people/tj/publications/finley_joachims_05a.pdf
		http://www.cs.sfu.ca/CourseCentral/741/jpei/readings/baya98.pdf
		Implementation of SVM in python with 	
	
	- Francais - ok
tuesday 10/11
	
	Defining the model to apply compare in svm
	Writing the code	

	- TCF Quebec
	- Apply for CSQ
	- Federal application

wednesday 11/11
	- Reuniao

thursday 12/11
	
friday 13/11
		
